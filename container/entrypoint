#!/bin/bash
#
# Auxspace avionics application entrypoint for docker
#
# Author: Maximilian Stephan @ Auxspace e.V.
# Copyright (c) 2025 Auxspace e.V.
#

set -e

################################################################################
# Functions                                                                    #
################################################################################

function first_boot_actions() {
  local is_ci_build="${1:-0}"
  # Signal first boot success
  sudo mkdir -p "$(dirname $FIRST_BOOT_TMP_FLAG)"
  sudo touch "$FIRST_BOOT_TMP_FLAG"

  # Usually its smart to exit after setup, but in CI builds we want to
  # continue to build the project, since docker containers do not run deattached
  # in CI builds.
  if [ "$is_ci_build" = "0" ]; then
    exit 0
  fi
}

function build_picotool() {
  if [ ! -d ${PICOTOOL_PATH}/build ]; then
    mkdir -p ${PICOTOOL_PATH}/build
  fi

  cd ${PICOTOOL_PATH}/build
  cmake -DCMAKE_INSTALL_PREFIX=~/.local ..
  make
  make install
}

function build_app() {
  set -e

  # compile picotool
  test -x ~/.local/bin/picotool || build_picotool

  # prepare build env
  echo "Preparing buildenv ..."
  mkdir -p "${BUILDER_APPLICATION}/build"
  cd "${BUILDER_APPLICATION}/build"
  PICO_BOARD=$PICO_BOARD cmake -G "Unix Makefiles" ../src

  # compile and link project
  echo "Compiling sources ..."
  make
  echo "Project compiled. Output is at \"${BUILDER_APPLICATION}/build\"."
}

function clean_app() {
  set -e

  cd "${BUILDER_APPLICATION}/build"
  make clean
  echo "Build dir cleaned."
}

################################################################################
# Variables                                                                    #
################################################################################

COMMAND=""
declare -a ARGS=()

# Flag that shows if everything has already been initialized.
FIRST_BOOT_TMP_FLAG="/var/auxspace/first_boot"

################################################################################
# Run first boot code to setup the environment correctly                       #
################################################################################

if [ ! -f "$FIRST_BOOT_TMP_FLAG" ]; then
  first_boot_actions ${AURORA_CI_BUILDER:+$AURORA_CI_BUILDER}
fi

################################################################################
# Commandline arg parser                                                       #
################################################################################

while [ $# -gt 0 ]; do
  case $1 in
    -b|--pico-board)
      declare -x PICO_BOARD="$2"
      shift 2
      ;;
    build)
      COMMAND=build_app
      shift
      ;;
    clean)
      COMMAND=clean_app
      shift
      ;;
    docs)
      shift
      exec "$BUILDER_APPLICATION/scripts/docs.sh" \
        --src-dir "$BUILDER_APPLICATION/docs" \
        $@
      ;;
    shell)
      COMMAND="/bin/bash"
      shift
      ;;
    --*)
      echo "ERROR: No such option: $1"
      exit 1
      ;;
    *)
      echo "ERROR: No such command: ${1}"
      exit 1
      ;;
  esac
done

################################################################################
# Run command                                                                  #
################################################################################

$COMMAND ${ARGS[@]}
